name: Production Health Check

# Monitor production deployments
on:
  schedule:
    # Check every 30 minutes
    - cron: '*/30 * * * *'
  workflow_dispatch:

jobs:
  health-check:
    name: Check Production Health
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment:
          - name: "Frontend (Vercel)"
            url: "https://ledgerlink.vercel.app"
          - name: "Backend (Render)"
            url: "https://ledgerlink.onrender.com"
    
    steps:
    - name: 🏥 Health Check - ${{ matrix.environment.name }}
      run: |
        echo "Checking ${{ matrix.environment.name }} health..."
        
        # Different health check for frontend vs backend
        if [[ "${{ matrix.environment.name }}" == *"Backend"* ]]; then
          # Backend health check
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ matrix.environment.url }}/api/health)
        else
          # Frontend health check
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ matrix.environment.url }})
        fi
        
        if [ $response -eq 200 ]; then
          echo "✅ ${{ matrix.environment.name }} is healthy"
        else
          echo "❌ ${{ matrix.environment.name }} health check failed (HTTP $response)"
          
          # Try detailed health check for backend
          if [[ "${{ matrix.environment.name }}" == *"Backend"* ]]; then
            curl -v ${{ matrix.environment.url }}/api/health/detailed || true
          fi
          
          # Notify if this is a scheduled run
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "🚨 Scheduled health check failed for ${{ matrix.environment.name }}"
            # Add notification logic here (Slack, Discord, email, etc.)
          fi
          
          exit 1
        fi
        
    - name: 📊 Performance Check - ${{ matrix.environment.name }}
      run: |
        echo "Measuring ${{ matrix.environment.name }} performance..."
        
        start_time=$(date +%s%N)
        if [[ "${{ matrix.environment.name }}" == *"Backend"* ]]; then
          curl -s ${{ matrix.environment.url }}/api/health > /dev/null
        else
          curl -s ${{ matrix.environment.url }} > /dev/null
        fi
        end_time=$(date +%s%N)
        
        duration_ms=$(( (end_time - start_time) / 1000000 ))
        echo "⏱️ Response time: ${duration_ms}ms"
        
        if [ $duration_ms -gt 5000 ]; then
          echo "⚠️ Slow response time detected"
        fi
        
    - name: 🔍 API Endpoint Check - Backend Only
      if: contains(matrix.environment.name, 'Backend')
      run: |
        echo "Testing key API endpoints..."
        
        endpoints=(
          "/api/health"
          "/api/docs" 
          "/api/v1/integrations/supported-systems"
        )
        
        for endpoint in "${endpoints[@]}"; do
          echo "Testing $endpoint..."
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ matrix.environment.url }}$endpoint)
          
          if [ $response -eq 200 ]; then
            echo "✅ $endpoint is working"
          else
            echo "❌ $endpoint failed (HTTP $response)"
          fi
        done
        
  create-status-badge:
    name: Update Status Summary
    runs-on: ubuntu-latest
    needs: health-check
    if: always()
    
    steps:
    - name: 📊 Create Status Summary
      run: |
        if [ "${{ needs.health-check.result }}" = "success" ]; then
          echo "🟢 All systems operational" >> $GITHUB_STEP_SUMMARY
          echo "status=operational" >> $GITHUB_ENV
        else
          echo "🔴 Some systems experiencing issues" >> $GITHUB_STEP_SUMMARY  
          echo "status=degraded" >> $GITHUB_ENV
        fi
        
        echo "## 🌐 System Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend (Vercel)**: $([ "${{ needs.health-check.result }}" = "success" ] && echo "✅ Operational" || echo "❌ Issues detected")" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend (Render)**: $([ "${{ needs.health-check.result }}" = "success" ] && echo "✅ Operational" || echo "❌ Issues detected")" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Live URLs**:" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend: https://ledgerlink.vercel.app" >> $GITHUB_STEP_SUMMARY
        echo "- Backend: https://ledgerlink.onrender.com" >> $GITHUB_STEP_SUMMARY
        echo "- API Health: https://ledgerlink.onrender.com/api/health" >> $GITHUB_STEP_SUMMARY
        echo "- API Docs: https://ledgerlink.onrender.com/api/docs" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Last checked**: $(date -u)" >> $GITHUB_STEP_SUMMARY