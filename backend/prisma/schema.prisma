// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Company Management
model User {
  id                       String    @id @default(cuid())
  email                    String    @unique
  passwordHash             String
  firstName                String
  lastName                 String
  role                     UserRole  @default(USER)
  isActive                 Boolean   @default(true)
  isEmailVerified          Boolean   @default(false)
  emailVerificationToken   String?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  lastLoginAt              DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  companyId                String?
  
  // Relations
  company                  Company?              @relation(fields: [companyId], references: [id])
  permissions              UserPermission[]
  erpConnections           ERPConnection[]
  matchingSessions         MatchingSession[]
  reports                  Report[]
  notifications            Notification[]
  apiKeys                  ApiKey[]
  auditLogs                AuditLog[]
  
  @@map("users")
}

model Company {
  id                String                @id @default(cuid())
  name              String
  slug              String                @unique
  industry          String?
  size              CompanySize?
  country           String?
  timezone          String?               @default("UTC")
  settings          Json                  @default("{}")
  isActive          Boolean               @default(true)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  // Relations
  users             User[]
  erpConnections    ERPConnection[]
  counterpartyLinks CounterpartyLink[]
  matchingSessions  MatchingSession[]
  reports           Report[]
  
  @@map("companies")
}

model Permission {
  id           String           @id @default(cuid())
  name         String           @unique
  description  String?
  category     String?
  createdAt    DateTime         @default(now())
  
  // Relations
  users        UserPermission[]
  
  @@map("permissions")
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  grantedAt    DateTime   @default(now())
  grantedBy    String?
  
  // Relations
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id])
  
  @@unique([userId, permissionId])
  @@map("user_permissions")
}

// ERP Integration
model ERPConnection {
  id              String              @id @default(cuid())
  name            String
  type            ERPType
  userId          String
  companyId       String
  status          ConnectionStatus    @default(DISCONNECTED)
  settings        Json                @default("{}")
  accessToken     String?
  refreshToken    String?
  tokenExpiresAt  DateTime?
  externalId      String?             // Tenant ID, Company ID, etc.
  lastSyncAt      DateTime?
  nextSyncAt      DateTime?
  syncStatus      SyncStatus?         @default(IDLE)
  syncError       String?
  totalRecords    Int                 @default(0)
  isActive        Boolean             @default(true)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  user            User                @relation(fields: [userId], references: [id])
  company         Company             @relation(fields: [companyId], references: [id])
  syncLogs        SyncLog[]
  invoices        Invoice[]
  
  @@unique([userId, companyId, type])
  @@map("erp_connections")
}

model SyncLog {
  id                String        @id @default(cuid())
  erpConnectionId   String
  type              SyncType      @default(MANUAL)
  status            SyncStatus    @default(PENDING)
  startedAt         DateTime      @default(now())
  completedAt       DateTime?
  recordsProcessed  Int           @default(0)
  recordsCreated    Int           @default(0)
  recordsUpdated    Int           @default(0)
  recordsSkipped    Int           @default(0)
  errorMessage      String?
  metadata          Json          @default("{}")
  
  // Relations
  erpConnection     ERPConnection @relation(fields: [erpConnectionId], references: [id], onDelete: Cascade)
  
  @@map("sync_logs")
}

// Invoice Management
model Invoice {
  id                 String            @id @default(cuid())
  invoiceNumber      String
  amount             Decimal           @db.Decimal(10, 2)
  currency           String            @default("USD")
  issueDate          DateTime
  dueDate            DateTime?
  counterpartyName   String
  counterpartyEmail  String?
  description        String?
  reference          String?
  status             InvoiceStatus     @default(DRAFT)
  metadata           Json              @default("{}")
  externalId         String?           // ID in external system
  erpConnectionId    String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  
  // Relations
  erpConnection      ERPConnection?    @relation(fields: [erpConnectionId], references: [id])
  sourceMatches      MatchResult[]     @relation("SourceInvoice")
  targetMatches      MatchResult[]     @relation("TargetInvoice")
  
  @@unique([invoiceNumber, erpConnectionId])
  @@map("invoices")
}

// Counterparty Linking
model CounterpartyLink {
  id                 String                   @id @default(cuid())
  companyId          String
  ourCustomerName    String
  theirCompanyName   String
  theirSystemType    String
  theirContactEmail  String
  theirContactName   String?
  connectionStatus   CounterpartyStatus       @default(PENDING)
  linkToken          String?                  @unique
  linkExpiresAt      DateTime?
  matchingRules      Json                     @default("{}")
  isActive           Boolean                  @default(true)
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  
  // Relations
  company            Company                  @relation(fields: [companyId], references: [id])
  matchingSessions   MatchingSession[]
  
  @@map("counterparty_links")
}

// Matching Engine
model MatchingSession {
  id                   String              @id @default(cuid())
  name                 String
  type                 MatchingType        @default(BILATERAL)
  userId               String
  companyId            String
  counterpartyLinkId   String?
  sourceType           DataSourceType
  sourceConfig         Json                @default("{}")
  targetType           DataSourceType
  targetConfig         Json                @default("{}")
  matchingRules        Json                @default("{}")
  confidenceThreshold  Float               @default(0.8)
  autoApprove          Boolean             @default(false)
  status               SessionStatus       @default(DRAFT)
  totalRecords         Int                 @default(0)
  processedRecords     Int                 @default(0)
  matchedRecords       Int                 @default(0)
  unmatchedRecords     Int                 @default(0)
  startedAt            DateTime?
  completedAt          DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  
  // Relations
  user                 User                @relation(fields: [userId], references: [id])
  company              Company             @relation(fields: [companyId], references: [id])
  counterpartyLink     CounterpartyLink?   @relation(fields: [counterpartyLinkId], references: [id])
  matchResults         MatchResult[]
  
  @@map("matching_sessions")
}

model MatchResult {
  id                   String          @id @default(cuid())
  matchingSessionId    String
  sourceInvoiceId      String?
  targetInvoiceId      String?
  confidence           Float
  status               MatchStatus     @default(PENDING)
  matchType            MatchType       @default(AUTOMATIC)
  matchFactors         Json            @default("{}")
  discrepancies        String[]
  notes                String?
  reviewedBy           String?
  reviewedAt           DateTime?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  
  // Relations
  matchingSession      MatchingSession @relation(fields: [matchingSessionId], references: [id], onDelete: Cascade)
  sourceInvoice        Invoice?        @relation("SourceInvoice", fields: [sourceInvoiceId], references: [id])
  targetInvoice        Invoice?        @relation("TargetInvoice", fields: [targetInvoiceId], references: [id])
  
  @@map("match_results")
}

// Reporting
model Report {
  id           String        @id @default(cuid())
  name         String
  type         ReportType
  format       ReportFormat  @default(PDF)
  status       ReportStatus  @default(PENDING)
  parameters   Json          @default("{}")
  filePath     String?
  fileSize     BigInt?
  isScheduled  Boolean       @default(false)
  schedule     Json?
  nextRun      DateTime?
  lastRun      DateTime?
  generatedAt  DateTime?
  expiresAt    DateTime?
  userId       String
  companyId    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relations
  user         User          @relation(fields: [userId], references: [id])
  company      Company       @relation(fields: [companyId], references: [id])
  
  @@map("reports")
}

// Notifications
model Notification {
  id        String            @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?             @default("{}")
  isRead    Boolean           @default(false)
  readAt    DateTime?
  createdAt DateTime          @default(now())
  
  // Relations
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

// API Keys
model ApiKey {
  id          String    @id @default(cuid())
  name        String
  key         String    @unique
  userId      String
  permissions String[]
  isActive    Boolean   @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("api_keys")
}

// Audit Logging
model AuditLog {
  id         String    @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  oldValues  Json?
  newValues  Json?
  metadata   Json?     @default("{}")
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime  @default(now())
  
  // Relations
  user       User?     @relation(fields: [userId], references: [id])
  
  @@map("audit_logs")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum CompanySize {
  STARTUP         // 1-10 employees
  SMALL           // 11-50 employees
  MEDIUM          // 51-200 employees
  LARGE           // 201-1000 employees
  ENTERPRISE      // 1000+ employees
}

enum ERPType {
  XERO
  QUICKBOOKS
  SAGE
  NETSUITE
  SAP
  CUSTOM
}

enum ConnectionStatus {
  CONNECTED
  DISCONNECTED
  ERROR
  EXPIRED
}

enum SyncStatus {
  IDLE
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum SyncType {
  MANUAL
  SCHEDULED
  WEBHOOK
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

enum CounterpartyStatus {
  PENDING
  INVITED
  LINKED
  REJECTED
  EXPIRED
}

enum MatchingType {
  BILATERAL       // Two-way matching between two parties
  MULTILATERAL    // Multi-party matching
  INTERNAL        // Internal reconciliation
}

enum DataSourceType {
  CSV_FILE
  ERP_CONNECTION
  API_ENDPOINT
  DATABASE_QUERY
}

enum SessionStatus {
  DRAFT
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum MatchStatus {
  PENDING
  MATCHED
  REJECTED
  MANUAL_REVIEW
}

enum MatchType {
  AUTOMATIC
  MANUAL
  AI_SUGGESTED
}

enum ReportType {
  RECONCILIATION_SUMMARY
  DETAILED_MATCHES
  DISCREPANCY_REPORT
  AUDIT_TRAIL
  PERFORMANCE_METRICS
  CUSTOM
}

enum ReportFormat {
  PDF
  CSV
  XLSX
  JSON
}

enum ReportStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
  EXPIRED
}

enum NotificationType {
  MATCH_COMPLETED
  SYNC_COMPLETED
  SYNC_FAILED
  REPORT_READY
  SYSTEM_ALERT
  INVITATION
  REMINDER
}