# Cloud-ready Docker Compose for deployment platforms
version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${PORT:-3001}:3001"
    environment:
      NODE_ENV: production
      PORT: ${PORT:-3001}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://lledgerlink.vercel.app}
      EMAIL_FROM_NAME: LedgerLink
      EMAIL_FROM_EMAIL: noreply@ledgerlink.com
      UPLOAD_PATH: ./uploads
      MAX_FILE_SIZE: 10485760
      
      # ERP Integration (optional)
      XERO_CLIENT_ID: ${XERO_CLIENT_ID:-}
      XERO_CLIENT_SECRET: ${XERO_CLIENT_SECRET:-}
      XERO_REDIRECT_URI: ${XERO_REDIRECT_URI:-}
      
      QUICKBOOKS_CLIENT_ID: ${QUICKBOOKS_CLIENT_ID:-}
      QUICKBOOKS_CLIENT_SECRET: ${QUICKBOOKS_CLIENT_SECRET:-}
      QUICKBOOKS_REDIRECT_URI: ${QUICKBOOKS_REDIRECT_URI:-}
      QUICKBOOKS_SANDBOX: ${QUICKBOOKS_SANDBOX:-true}
      
      # Email (optional)
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      
      # Monitoring (optional)
      SENTRY_DSN: ${SENTRY_DSN:-}
      LOGTAIL_SOURCE_TOKEN: ${LOGTAIL_SOURCE_TOKEN:-}
      
    volumes:
      - uploads:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
  # Only include database services if not using managed databases
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ledgerlink}
      POSTGRES_USER: ${POSTGRES_USER:-ledgerlink}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ledgerlink} -d ${POSTGRES_DB:-ledgerlink}"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - with-db  # Only start if explicitly requested
      
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    profiles:
      - with-db  # Only start if explicitly requested

volumes:
  uploads:
  postgres_data:
  redis_data: