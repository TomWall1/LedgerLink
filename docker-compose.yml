# Docker Compose for LedgerLink Development Environment
# Includes MongoDB, Redis, and optional services

version: '3.8'

services:
  # MongoDB for data storage
  mongodb:
    image: mongo:7.0
    container_name: ledgerlink-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: ledgerlink
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - ledgerlink-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: ledgerlink-redis
    restart: unless-stopped
    command: redis-server --requirepass password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ledgerlink-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API service (development)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ledgerlink-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=3002
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/ledgerlink?authSource=admin
      - REDIS_URL=redis://:password@redis:6379
      - FRONTEND_URL=http://localhost:3000
      - BACKEND_URL=http://localhost:3002
    ports:
      - "3002:3002"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_uploads:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ledgerlink-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React app (development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: ledgerlink-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:3002/api
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - ledgerlink-network
    stdin_open: true
    tty: true

  # MongoDB Express (optional - for database management)
  mongo-express:
    image: mongo-express:1.0.2
    container_name: ledgerlink-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongodb:27017/
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    ports:
      - "8081:8081"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - ledgerlink-network
    profiles:
      - tools

  # Redis Commander (optional - for Redis management)
  redis-commander:
    image: ghcr.io/joeferner/redis-commander:latest
    container_name: ledgerlink-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:password
    ports:
      - "8082:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ledgerlink-network
    profiles:
      - tools

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  ledgerlink-network:
    driver: bridge

# Development commands:
# docker-compose up -d                    # Start core services
# docker-compose --profile tools up -d    # Start with management tools
# docker-compose logs -f backend          # Follow backend logs
# docker-compose exec mongodb mongosh     # Connect to MongoDB
# docker-compose exec redis redis-cli     # Connect to Redis
# docker-compose down -v                  # Stop and remove volumes